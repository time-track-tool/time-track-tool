# Copyright (C) 2010-21 Ralf Schlatterbeck. All rights reserved
# Reichergasse 131, A-3411 Weidling
# ****************************************************************************
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# ****************************************************************************
# Dual License:
# If you need a proprietary license that permits you to add your own
# software without the need to publish your source-code under the GNU
# General Public License above, contact
# Reder, Christian Reder, A-2560 Berndorf, Austria, christian@reder.eu

from __future__ import print_function
import os
from tempfile                       import mkstemp
from socket                         import socket, SOCK_SEQPACKET, AF_UNIX
from roundup.exceptions             import Reject
from common                         import require_attributes

def dyndns_update (db, cl, nodeid, old_values) :
    # Only generate config if at least one host is configured
    hosts = db.dyndns_host.getnodeids ()
    if not hosts :
        return
    fd, fn = mkstemp ('conf', 'ddclient', '/var/run/roundup/')
    f = os.fdopen (fd, "wb")
    print ("created")
    print ("# Configuration file for ddclient generated by roundup", file = f)
    print ("#", file = f)
    print ("# /etc/ddclient.conf", file = f)
    print ("", file = f)
    print ("pid=/var/run/ddclient.pid", file = f)

    dyn = db.dyndns.getnode (db.dyndns.getnodeids () [0])
    if dyn.syslog :
        print ("syslog=yes", file = f)
    print ("", file = f)
    if dyn.interface :
        print ("use=if, if=%s" % dyn.interface, file = f)
        if dyn.interface_skip :
            print ("if-skip=%s" % dyn.interface, file = f)
    elif dyn.web_url :
        print ("use=web, web=%s" % dyn.web_url, file = f)
        if dyn.web_skip :
            print ("web-skip=%s" % dyn.web_skip, file = f)
    elif dyn.fw_url :
        print ("use=fw, fw=%s" % dyn.fw_url, file = f)
        if dyn.fw_skip :
            print ("fw-skip=%s" % dyn.fw_skip, file = f)
        if dyn.fw_login :
            print ("fw-login=%s" % dyn.fw_login, file = f)
        if dyn.fw_password :
            print ("fw-password=%s" % dyn.fw_password, file = f)
    else :
        print ("# Default config", file = f)
        print ("use=web, web=dyndns", file = f)
    print ("", file = f)

    for sid in db.dyndns_service.filter (None, dict (dyndns = dyn.id)) :
        service = db.dyndns_service.getnode (sid)
        proto = db.dyndns_protocol.get (service.protocol, 'name')
        print ("protocol=%s" % proto, file = f)
        for k in 'server', 'login', 'password' :
            print ("%s=%s" % (k, service [k]), file = f)
        for h in db.dyndns_host.filter (None, dict (dyndns_service = sid)) :
            host = db.dyndns_host.getnode (h)
            if host.description :
                print ("#", host.description, file = f)
            print (host.hostname, file = f)
        print ("", file = f)
    f.close ()
    # Notify a daemon to move the file in place
    s = socket (AF_UNIX, SOCK_SEQPACKET)
    s.connect (db.config.detectors.UPDATE_SOCKET)
    s.send ('dyndns %s' % fn)
    s.close ()
# end def dyndns_update

def dyndns_service (db, cl, nodeid, new_values) :
    require_attributes \
        ( db.i18n.gettext, cl, nodeid, new_values
        , 'protocol', 'login', 'password'
        )
    a = 'server'
    if  (  not nodeid and a not in new_values
        or nodeid and new_values.get (a, cl.get (nodeid, a)) is None
        ) :
        prid  = new_values.get ('protocol')
        if not prid :
            prid = cl.get (nodeid, 'protocol')
        server = db.dyndns_protocol.get (prid, 'default_server')
        new_values [a] = server
# end def dyndns_service

def dyndns_host (db, cl, nodeid, new_values) :
    require_attributes \
        (db.i18n.gettext, cl, nodeid, new_values, 'dyndns_service')
# end def dyndns_host

def init (db) :
    if 'dyndns_host' in db.classes :
        db.dyndns.react         ("create", dyndns_update)
        db.dyndns.react         ("set",    dyndns_update)
        db.dyndns_service.react ("create", dyndns_update)
        db.dyndns_service.react ("set",    dyndns_update)
        db.dyndns_host.react    ("create", dyndns_update)
        db.dyndns_host.react    ("set",    dyndns_update)
        db.dyndns_host.audit    ("create", dyndns_host)
        db.dyndns_host.audit    ("set",    dyndns_host)
        db.dyndns_service.audit ("create", dyndns_service)
        db.dyndns_service.audit ("set",    dyndns_service)
# end def init
