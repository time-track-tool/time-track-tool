#!/usr/bin/python
from __future__ import print_function
from argparse   import ArgumentParser
from netrc      import netrc
from getpass    import getpass
from csv        import DictReader, DictWriter
from roundup    import instance
try :
    from urllib.parse import urlparse, urlencode
except ImportError:
    from urlparse import urlparse
    from urllib   import urlencode
import sys
import os
import requests

class User_Importer (object) :

    def __init__ (self, args) :
        self.args    = args
        self.session = requests.session ()
        self.user    = args.username
        self.url     = args.url
        self.baseurl = args.url
        # Basic Auth: user, password
        self.session.auth = (self.user, self.get_pw ())
        if self.url.endswith ('/') :
            orig = self.url.rstrip ('/')
        else :
            orig = self.url
            self.url += '/'
        self.headers = dict \
            ( Origin  = orig
            , Referer = self.url
            )
        self.headers ['X-Requested-With'] = 'requests library'
        self.url += 'rest/data/'
    # end def __init__

    def get (self, s) :
        r = self.session.get (self.url + s, headers = self.headers)
        if not (200 <= r.status_code <= 299) :
            raise RuntimeError \
                ( 'Invalid get result: %s: %s\n    %s'
                % (r.status_code, r.reason, r.text)
                )
        return r.json ()
    # end def get

    def get_pw (self) :
        """ Password given as option takes precedence.
            Next we try password via .netrc. If that doesn't work we ask.
        """
        if self.args.password :
            return self.args.password
        a = n = None
        try :
            n = netrc ()
        except IOError :
            pass
        if n and self.args.url :
            t = urlparse (self.args.url)
            a = n.authenticators (t.netloc)
        if a :
            un, d, pw = a
            if un != self.user :
                raise ValueError ("Netrc username doesn't match")
            return pw
        pw = getpass ('Password: ')
        return pw
    # end def get_pw

    def post_or_put (self, method, s, data = None, json = None, etag = None) :
        d = {}
        if data :
            d ['data'] = data
        if json :
            d ['json'] = json
        h = dict (self.headers)
        if etag :
            h ['If-Match'] = etag
        r = method (self.url + s, headers = h, **d)
        if not (200 <= r.status_code <= 299) :
            raise RuntimeError \
                ( 'Invalid put/post result: %s: %s\n    %s'
                % (r.status_code, r.reason, r.text)
                )
        return r.json ()
    # end def post_or_put

    def post (self, s, data = None, json = None, etag = None) :
        return self.post_or_put (self.session.post, s, data, json, etag)
    # end def post

    def put (self, s, data = None, json = None, etag = None) :
        return self.post_or_put (self.session.put, s, data, json, etag)
    # end def put

    def import_userdata (self) :
        count = notfound = 0
        with open (self.args.filename, 'r') as f :
            dr = DictReader (f, delimiter = self.args.delimiter)
            for rec in dr :
                # FIXME: Use exact string search
                #d = { 'username:' : rec ['tt-username'] }
                d = \
                    { 'username' : rec ['tt-username']
                    , 'status'   : 1
                    , '@verbose' : 2
                    }
                j = self.get ('user?' + urlencode (d))
                j = j ['data']['collection']
                if not len (j) :
                    print ("Not found: %s" % rec ['tt-username'])
                if len (j) == 1 :
                    j = j [0]
                else :
                    for item in j :
                        if item ['username'] == rec ['tt-username'] :
                            j = item
                            break
                #assert len (j) <= 1
    # end def import_userdata

# end class User_Importer

def main () :
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'filename'
        , help    = "CSV file to import"
        )
    cmd.add_argument \
        ( "-D", "--delimiter"
        , help    = "Delimiter of CSV data, default=TAB"
        , default = '\t'
        )
    cmd.add_argument \
        ( "-E", "--encoding"
        , help    = "Encoding of CSV data, default=%(default)s"
        , default = 'utf-8'
        )
    cmd.add_argument \
        ( "-n", "--dry-run"
        , help    = "Do not update roundup, only dry-run"
        , default = False
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-p", "--password"
        , help    = "Password, better use .netrc"
        )
    cmd.add_argument \
        ( "-U", "--url"
        , help    = "URL of tracker (without REST path)"
        )
    cmd.add_argument \
        ( "-u", "--username"
        , help    = "Database user, default=%(default)s"
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-v', '--verbose'
        , dest   = 'verbose'
        , help   = 'Verbose output'
        , action = 'count'
        )
    args = cmd.parse_args ()
    ui   = User_Importer (args)
    ui.import_userdata ()
# end def main

if __name__ == '__main__' :
    main ()
