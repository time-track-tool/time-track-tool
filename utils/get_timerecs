#!/usr/bin/python3
from __future__ import print_function
import sys
import os
import requests
from argparse import ArgumentParser
from getpass  import getpass
from netrc    import netrc
try:
    from urllib.parse import urlparse, urlencode
except ImportError:
    from urlparse import urlparse
    from urllib   import urlencode

class Getter ():
    
    def __init__ (self, args):
        self._pw      = None
        self.session  = requests.session ()
        self.args     = args
        self.url      = args.url
        self.username = args.username
        self.password = args.password
        self.session.auth = (self.username, self.get_pw ())
        if self.url.endswith ('/'):
            orig = self.url.rstrip ('/')
        else:
            orig = self.url
            self.url += '/'
        self.headers = dict \
            ( Origin  = orig
            , Referer = self.url
            )
        self.headers ['X-Requested-With'] = 'requests library'
        self.url += 'rest/data/'
        self.wp_map = {}
        if self.args.auto_wp:
            self.get_auto_wp ()
    # end def __init__

    def get (self, s, as_text=False):
        r = self.session.get (self.url + s, headers = self.headers)
        if not (200 <= r.status_code <= 299):
            raise RuntimeError \
                ( 'Invalid get result: %s: %s\n    %s'
                % (r.status_code, r.reason, r.text)
                )
        if as_text:
            return r.text
        return r.json ()
    # end def get

    def get_pw (self):
        """ Password given as option takes precedence.
            Next we try password via .netrc. If that doesn't work we ask.
        """
        if self._pw:
            return self._pw
        if self.password:
            self._pw = self.password
            return self.password
        a = n = None
        try:
            n = netrc ()
        except IOError:
            pass
        if n:
            t = urlparse (self.url)
            a = n.authenticators (t.netloc)
        if a:
            un, d, pw = a
            if un != self.username:
                raise ValueError ("Netrc username doesn't match")
            self._pw = pw
            return pw
        pw = getpass ('Password: ')
        self._pw = pw
        return pw
    # end def get_pw

    def get_auto_wp (self):
        """ Get all WPs that relate to an auto-wp for this user.
            Note that we're getting *all* of them not just the booked-on
            ones: We want to test for conflicts when doing historic
            changes.
        """
        d = dict \
            ( auto_wp = '-1,-2'
            , bookers = self.args.user
            )
        #d = \
        #    { 'wp.auto_wp':        '-1,-2'
        #    , 'daily_record.user': self.args.user
        #    , 'daily_record.date': self.args.daterange
        #    }
        #fields = '&@fields=wp,wp.auto_wp'
        #j = self.get ('time_record?' + urlencode (d)+fields)
        #j = j ['data']['collection']
        pf  = ( 'is_public_holiday', 'is_special_leave', 'is_vacation'
              , 'no_overtime', 'no_overtime_day', 'overtime_reduction'
              , 'max_hours', 'name'
              )
        pf  = ','.join ('project.' + i for i in pf)
        wpf = ['auto_wp', 'durations_allowed', 'name', 'time_start', 'time_end']
        wpf = ','.join (wpf)
        awf = [ 'contract_type.name', 'contract_type.order', 'duration'
              , 'durations_allowed', 'is_valid', 'name'
              ]
        awf = ','.join ('auto_wp.' + i for i in awf)
        d ['@fields'] = ','.join ((wpf, pf, awf))
        j = self.get ('time_wp?' + urlencode (d))
        j = j ['data']['collection']
        auto_wp       = self.auto_wp       = {}
        auto_wp_wp    = self.auto_wp_wp    = {}
        contract_type = self.contract_type = {}
        for item in j:
            if item ['auto_wp.contract_type.name']:
                contract_type [item ['auto_wp.contract_type.name']] = dict \
                    ( name  = item ['auto_wp.contract_type.name']
                    , order = item ['auto_wp.contract_type.order'] or 1
                    )
            awp_name = item ['auto_wp.name']
            if self.args.auto_wp_suffix:
                if awp_name.endswith (self.args.auto_wp_suffix):
                    l = len (self.args.auto_wp_suffix)
                    awp_name = awp_name [:-l].rstrip ()
            auto_wp [item ['auto_wp']['id']] = dict \
                ( contract_type      = item ['auto_wp.contract_type.name']
                , duration           = item ['auto_wp.duration']
                , durations_allowed  = item ['auto_wp.durations_allowed']
                , is_valid           = item ['auto_wp.is_valid']
                , name               = awp_name
                , is_public_holiday  = item ['project.is_public_holiday']
                , is_special_leave   = item ['project.is_special_leave']
                , is_vacation        = item ['project.is_vacation']
                , no_overtime        = item ['project.no_overtime']
                , no_overtime_day    = item ['project.no_overtime_day']
                , overtime_reduction = item ['project.overtime_reduction']
                , max_hours          = item ['project.max_hours']
                , project_name       = item ['project.name']
                )
            auto_wp_wp [item ['id']] = dict \
                ( durations_allowed  = item ['durations_allowed']
                , name               = item ['name'].split () [-1]
                , time_start         = item ['time_start']
                , time_end           = item ['time_end']
                , auto_wp            = awp_name
                , contract_type      = item ['auto_wp.contract_type.name']
                , is_public_holiday  = item ['project.is_public_holiday']
                , is_special_leave   = item ['project.is_special_leave']
                , is_vacation        = item ['project.is_vacation']
                , no_overtime        = item ['project.no_overtime']
                , no_overtime_day    = item ['project.no_overtime_day']
                , overtime_reduction = item ['project.overtime_reduction']
                , max_hours          = item ['project.max_hours']
                , project_name       = item ['project.name']
                )
    # end def get_auto_wp

    def get_tp_name (self, d):
        if d ['is_public_holiday']:
            tp = 'parent.holiday_tp'
        elif d ['is_special_leave']:
            tp = 'parent.special_tp'
        elif d ['is_vacation']:
            tp = 'parent.vacation_tp'
        elif d ['max_hours'] == 0:
            tp = 'parent.flexi_tp'
        elif (  d ['no_overtime'] and d ['overtime_reduction']
             or d ['no_overtime'] and d ['no_overtime_day']
             ):
            # These wp need to be set up in test harness
            # Currently only set up in one test, needs to be factored
            # if re-used
            if d ['project_name'].startswith ('Nursing'):
                tp = 'parent.nursing_tp'
            elif d ['project_name'].startswith ('Sick'):
                tp = 'parent.sick_tp'
            elif d ['project_name'].startswith ('Medical'):
                tp = 'parent.medical_tp'
            else:
                tp = 'parent.unpaid_tp'
        else:
            assert 0
        return tp
    # end def get_tp_name

    def generate_auto_wp (self):
        ind = self.ind
        print (ind, "username = db.user.get (user, 'username')")
        print (ind, "aw_by_ct_name = {}")
        for awid in sorted (self.auto_wp):
            aw = self.auto_wp [awid]
            ct = None
            if aw ['contract_type']:
                ct = "'" + aw ['contract_type'] + "'"
            print (ind, "id = db.auto_wp.create \\")
            print (ind, "    ( name              = '%s'" % aw ['name'])
            if ct:
                print (ind, "    , contract_type     = ct_by_name [%s]" % ct)
            if aw ['duration']:
                print (ind, "    , duration          = date.Interval ('%s')"
                      % aw ['duration']
                      )
            print (ind, "    , durations_allowed = %d"
                  % aw ['durations_allowed']
                  )
            print (ind, "    , is_valid          = 0")
            print (ind, "    , org_location      = olo")
            tp = self.get_tp_name (aw)
            print (ind, "    , time_project      = %s" % tp)
            print (ind, "    )")
            print (ind, "aw_by_ct_name [(%s, '%s')] = id" % (ct, aw ['name']))
        for n, wpid in enumerate (sorted (self.auto_wp_wp)):
            self.wp_map [wpid] = n
            wp = self.auto_wp_wp [wpid]
            ct = None
            if wp ['contract_type']:
                ct = "'" + wp ['contract_type'] + "'"
            print (ind, "au_wp_%d = db.time_wp.create \\" % n)
            print (ind, "    ( name              = '%%s %s' %% username"
                  % wp ['name']
                  )
            print (ind, "    , auto_wp           = aw_by_ct_name [(%s, '%s')]"
                  % (ct, wp ['auto_wp'])
                  )
            print (ind, "    , bookers           = [user]")
            print (ind, "    , durations_allowed = %d"
                  % wp ['durations_allowed']
                  )
            print (ind, "    , time_start        = date.Date ('%s')"
                  % wp ['time_start']
                  )
            if wp ['time_end']:
                print (ind, "    , time_end          = date.Date ('%s')"
                      % wp ['time_end']
                      )
            print (ind, "    , responsible       = parent.user0")
            tp = self.get_tp_name (wp)
            print (ind, "    , project           = %s" % tp)
            print (ind, "    )")
        for awid in sorted (self.auto_wp):
            aw = self.auto_wp [awid]
            ct = None
            if aw ['contract_type']:
                ct = "'" + aw ['contract_type'] + "'"
            if aw ['is_valid']:
                print \
                    (ind, "id = aw_by_ct_name [(%s, '%s')]" % (ct, aw ['name']))
                print (ind , "db.auto_wp.set (id, is_valid = True)")
    # end def generate_auto_wp

    def generate_ct (self):
        ind = self.ind
        print (ind, "ct_by_name = {}")
        for ctkey in sorted (self.contract_type):
            if not ctkey:
                continue
            ct = self.contract_type [ctkey]
            print (ind, "id = db.contract_type.create \\")
            print (ind, "    ( name  = '%s'" % ct ['name'])
            print (ind, "    , order = %d"   % ct ['order'])
            print (ind, "    )")
            print (ind, "ct_by_name ['%s'] = id" % ct ['name'])
    # end def generate_ct

    def print_attendance_rec (self, ar):
        ind = self.ind
        print (ind, "db.attendance_record.create \\")
        print (ind, "    ( daily_record  = dr")
        # The 'tr' variable is valid here, we're iterating over the
        # attendance recs of a given time_record.
        if ar ['time_record']:
            print (" %s    , time_record   = tr" % ind)
        if ar ['start']:
            print \
                ( " %s    , start         = '%s'"
                % (ind, ar ['start'])
                )
        if ar ['end']:
            print \
                ( " %s    , end           = '%s'"
                % (ind, ar ['end'])
                )
        if ar ['work_location']:
            id = ar ['work_location']['id']
            if id == '8':
                id = 'holo'
            else:
                id = "'%s'" % id
            print (" %s    , work_location = %s" % (ind, id))
        print (ind, "    )")
    # end def print_attendance_rec

    def print_timerecs (self):
        h_done  = False
        tp_done = False
        j = self.get ('user?' + urlencode ({'username:': self.args.user}))
        j = j ['data']['collection']
        assert len (j) == 1
        userid = j [0]['id']
        wpmax   = 3 # number of reserved time_wp ids
        wpdict  = {}

        print ("from roundup import date")
        print ("")
        print ("def import_data_%s (db, user" % userid, end = '')
        if self.args.dynuser or self.args.auto_wp:
            print (', olo', end = '')
        if self.args.auto_wp:
            print (', parent', end = '')
        print ("):")
        ind    = self.ind = '   '
        if self.args.auto_wp:
            self.generate_ct ()
        filter = dict (user = self.args.user, date = self.args.daterange)
        # Loop over dynamic user records sorted by date and output those
        # that intersect with the range.
        if self.args.dynuser:
            dates = self.args.daterange.split (';')
            if len (dates) == 2:
                dstart, dend = dates
            else:
                assert len (dates) == 1
                dstart = dates [0]
                dend   = None
            d   = dict (user = self.args.user)
            d ['@sort']    = 'valid_from'
            d ['@verbose'] = 5
            #d ['valid_from'] = dstart + ';'
            dyn = self.get ('user_dynamic?' + urlencode (d))
            dyn = dyn ['data']['collection']
            for d in dyn:
                ud = self.get ('user_dynamic/%s' % d ['id'])
                ud = ud ['data']['attributes']
                if dend and ud ['valid_from'] > dend:
                    break
                if ud ['valid_to'] and ud ['valid_to'] <= dstart:
                    continue
                otp = ud ['overtime_period']
                if otp:
                    otp = self.get ('overtime_period/%s' % otp ['id'])
                    otp = otp ['data']['attributes']
                    print \
                        ( " %ssd = dict (months = %s, required_overtime = %s,"
                          " weekly = %s)"
                        % ( ind
                          , otp ['months']
                          , otp ['required_overtime']
                          , otp ['weekly']
                          )
                        )
                    print (ind, "otp = db.overtime_period.filter (None, sd)")
                    print (ind, "assert len (otp) == 1")
                    print (ind, "otp = otp [0]")
                else:
                    print (ind, "otp = None")
                if not h_done:
                    print (ind, "holo = db.work_location.create \\")
                    print (ind, "    ( code = 'Home-AT'")
                    print (ind, "    , description = 'Home Office Location'")
                    print (ind, "    )")
                    h_done = True
                print (ind, "db.user_dynamic.create \\")
                n = 0
                for pname in ud:
                    if  (   pname == 'contract_type'
                        and self.args.auto_wp
                        and ud [pname]
                        ):
                        # Get the contract type:
                        ct = self.get \
                            ('contract_type/%s' % ud ['contract_type']['id'])
                        ct = ct ['data']['attributes']
                        ud ['contract_type'] = "ct_by_name ['%s']" % ct ['name']
                    if isinstance (ud [pname], (type ([]), type ({}))):
                        continue
                    delim = ['(', ','][bool (n)]
                    value = ud [pname]
                    if value is None:
                        continue
                    if pname.startswith ('valid_'):
                        value = 'date.Date ("%s")' % value
                    print \
                        (" %s    %s %-18s = %s" % (ind, delim, pname, value))
                    n += 1
                print (ind, "    , org_location       = olo")
                print (ind, "    , overtime_period    = otp")
                print (ind, "    , user               = user")
                print \
                    ( " %s    , vac_aliq           = '%s'"
                    % (ind, ud ['vac_aliq']['id'])
                    )
                print (ind, "    )")
        if self.args.auto_wp:
            self.generate_auto_wp ()
        if self.args.vcorr:
            d   = dict (absolute = True)
            d ['@page_size'] = 1
            vcabs = self.get ('vacation_correction?' + urlencode (d))
            vcabs = vcabs ['data']['collection']
            assert len (vcabs) <= 1
            d   = dict (filter)
            d ['absolute'] = False
            vcs = self.get ('vacation_correction?' + urlencode (filter))
            vcs = vcs ['data']['collection']
            for v in vcabs + vcs:
                vc = self.get ('vacation_correction/%s' % v ['id'])
                vc = vc ['data']['attributes']
                print (ind, "vcorr = db.vacation_correction.create \\")
                print (ind, "    ( user     = user")
                print (ind, "    , date     = date.Date ('%s')" % vc ['date'])
                print (ind, "    , absolute = %s" % vc ['absolute'])
                print (ind, "    , days     = %s" % vc ['days'])
                print (ind, "    )")
        if self.args.leaves:
            leave_filter = dict \
                (user = self.args.user, first_day = self.args.daterange)
            leave_filter ['@sort'] = 'first_day'
            lvs = self.get ('leave_submission?' + urlencode (leave_filter))
            lvs = lvs ['data']['collection']
            for lv in lvs:
                l = self.get ('leave_submission/%s' % lv ['id'])
                l = l ['data']['attributes']
                print (ind, "ls = db.leave_submission.create \\")
                print (ind, "    ( user      = user")
                print \
                    ( " %s    , first_day = date.Date ('%s')"
                    % (ind, l ['first_day'])
                    )
                print \
                    ( " %s    , last_day  = date.Date ('%s')"
                    % (ind, l ['last_day'])
                    )
                print (ind, "    , status    = '%s'" % l ['status']['id'])
                if lv ['id'] in self.wp_map:
                    w_id = 'au_wp_%d' % self.wp_map [wpid]
                else:
                    w_id = "'44'"
                print (ind, "    , time_wp   = %s" % w_id)
                print (ind, "    )")
        if self.args.do_timerecs:
            filter ['@sort'] = 'date'
            drs = self.get ('daily_record?' + urlencode (filter))
            drs = drs ['data']['collection']
            for drr in drs:
                dr = self.get ('daily_record/%s' % drr ['id'])
                dr = dr ['data']['attributes']
                print (ind, "dr = db.daily_record.create \\")
                print (ind, "    ( user = user")
                print \
                    (" %s    , date = date.Date ('%s')" % (ind, dr ['date']))
                print \
                    ( " %s    , weekend_allowed   = %s"
                    % (ind, dr ['weekend_allowed'])
                    )
                print \
                    ( " %s    , required_overtime = %s"
                    % (ind, dr ['required_overtime'])
                    )
                print (ind, "    )")
                for tri in dr ['time_record']:
                    tr = self.get ('time_record/%s' % tri ['id'])
                    tr = tr ['data']['attributes']
                    tact = 'time_activity'
                    if tr [tact] and tr [tact]['id'] == '10' and not tp_done:
                        print (ind, 'tatp = db.time_activity.create \\')
                        print (ind, "    ( name     = 'Travel passive'")
                        print (ind, "    , travel   = 1")
                        print (ind, "    , is_valid = True")
                        print (ind, "    )")
                        tp_done = True
                    print (ind, "tr = db.time_record.create \\")
                    print (ind, "    ( daily_record  = dr")
                    print \
                        (" %s    , duration      = %s" % (ind, tr ['duration']))
                    if tr [tact] and tr [tact]['id'] == '10':
                        print (ind, "    , time_activity = tatp")
                    w_id  = None
                    if tr ['wp']:
                        wpid = tr ['wp']['id']
                        w_id = None
                        if wpid in self.wp_map:
                            w_id = 'au_wp_%d' % self.wp_map [wpid]
                        elif wpid in wpdict:
                            w_id = "'%s'" % wpdict [wpid]
                    if tr ['wp'] and w_id:
                        new_wpid = w_id
                    elif tr ['wp'] is None:
                        new_wpid = None
                    else:
                        wp = self.get ('time_wp/%s' % tr ['wp']['id'])
                        wp = wp ['data']['attributes']
                        tp = self.get ('time_project/%s' % wp ['project']['id'])
                        tp = tp ['data']['attributes']
                        if tp ['is_public_holiday']:
                            new_wpid = 1
                        elif tp ['is_vacation']:
                            new_wpid = 44
                        elif tp ['no_overtime']:
                            new_wpid = 2
                        else:
                            wpmax += 1
                            new_wpid = wpmax
                        wpdict [tr ['wp']['id']] = new_wpid
                        new_wpid = "'%s'" % new_wpid
                    if new_wpid:
                        print (ind, "    , wp            = %s" % new_wpid)
                    print (ind, "    )")
                    for ari in tr ['attendance_record']:
                        ar = self.get ('attendance_record/%s' % ari ['id'])
                        ar = ar ['data']['attributes']
                        self.print_attendance_rec (ar)
                for ari in dr ['attendance_record']:
                    ar = self.get ('attendance_record/%s' % ari ['id'])
                    ar = ar ['data']['attributes']
                    # See above, if the ar contains a time_record link
                    # it will already have been output
                    if ar ['time_record']:
                        continue
                    self.print_attendance_rec (ar)
        print (ind, "db.commit ()")
        print ("# end def import_data_%s" % userid)

    # end def print_timerecs

# end class Getter

def main ():
    dir = os.getcwd ()
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'user'
        , help    = 'Username for whom data is exported'
        )
    cmd.add_argument \
        ( 'daterange'
        , help    = 'Date range for export'
        )
    cmd.add_argument \
        ( '--auto-wp'
        , help    = 'Get automatic workpackages, implies -D'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '--auto-wp-suffix'
        , help    = 'Remove given suffix from auto-wp names'
        )
    cmd.add_argument \
        ( '-c', '--vacation_correction'
        , dest    = 'vcorr'
        , help    = 'Export vacation corrections, too'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-D', '--dynuser'
        , dest    = 'dynuser'
        , help    = 'Export dynamic user data too for given range'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-L', '--leaves'
        , help    = 'Export leave requests for given range'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-p', '--password'
        , help    = 'Password to use for access, better use .netrc'
        )
    cmd.add_argument \
        ( '-u', '--username'
        , help    = 'User name used to access the tracker, default=%(default)s'
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-U', '--url'
        , help    = 'URL of tracker (without rest path) default: %(default)s'
        , default = 'http:s//tracker.example.com/ttt/'
        )
    cmd.add_argument \
        ( '-t', '--no-timerecs'
        , dest    = 'do_timerecs'
        , help    = 'Do not export time records (and daily records)'
        , action  = 'store_false'
        , default = True
        )
    args = cmd.parse_args ()
    # auto_wp implies dynuser
    if args.auto_wp:
        args.dynuser = True
    g = Getter (args)
    g.print_timerecs ()
# end def main

if __name__ == '__main__':
    main ()
