#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
from __future__ import print_function
import sys
import os
import requests
from argparse import ArgumentParser
from getpass  import getpass
from netrc    import netrc
try :
    from urllib.parse import urlparse, urlencode
except ImportError:
    from urlparse import urlparse
    from urllib   import urlencode

class Getter () :
    
    def __init__ (self, args) :
        self._pw      = None
        self.session  = requests.session ()
        self.args     = args
        self.url      = args.url
        self.username = args.username
        self.password = args.password
        self.session.auth = (self.username, self.get_pw ())
        if self.url.endswith ('/') :
            orig = self.url.rstrip ('/')
        else :
            orig = self.url
            self.url += '/'
        self.headers = dict \
            ( Origin  = orig
            , Referer = self.url
            )
        self.headers ['X-Requested-With'] = 'requests library'
        self.url += 'rest/data/'
    # end def __init__

    def get (self, s, as_text=False) :
        r = self.session.get (self.url + s, headers = self.headers)
        if not (200 <= r.status_code <= 299) :
            raise RuntimeError \
                ( 'Invalid get result: %s: %s\n    %s'
                % (r.status_code, r.reason, r.text)
                )
        if as_text :
            return r.text
        return r.json ()
    # end def get

    def get_pw (self) :
        """ Password given as option takes precedence.
            Next we try password via .netrc. If that doesn't work we ask.
        """
        if self._pw :
            return self._pw
        if self.password :
            self._pw = self.password
            return self.password
        a = n = None
        try :
            n = netrc ()
        except IOError :
            pass
        if n :
            t = urlparse (self.url)
            a = n.authenticators (t.netloc)
        if a :
            un, d, pw = a
            if un != self.username :
                raise ValueError ("Netrc username doesn't match")
            self._pw = pw
            return pw
        pw = getpass ('Password: ')
        self._pw = pw
        return pw
    # end def get_pw

    def print_timerecs (self) :
        j = self.get ('user?' + urlencode ({'username:' : self.args.user}))
        j = j ['data']['collection']
        assert len (j) == 1
        userid = j [0]['id']
        wpmax   = 3 # number of reserved time_wp ids
        wpdict  = {}

        print ("from roundup import date")
        print ("")
        if self.args.dynuser :
            print ("def import_data_%s (db, user, olo) :" % userid)
        else :
            print ("def import_data_%s (db, user) :" % userid)
        ind    = '   '
        filter = dict (user = self.args.user, date = self.args.daterange)
        # Loop over dynamic user records sorted by date and output those
        # that intersect with the range.
        if self.args.dynuser :
            dates = self.args.daterange.split (';')
            if len (dates) == 2 :
                dstart, dend = dates
            else :
                assert len (dates) == 1
                dstart = dates [0]
                dend   = None
            d   = dict (user = self.args.user)
            d ['@sort']    = 'valid_from'
            d ['@verbose'] = 5
            #d ['valid_from'] = dstart + ';'
            dyn = self.get ('user_dynamic?' + urlencode (d))
            dyn = dyn ['data']['collection']
            for d in dyn :
                ud = self.get ('user_dynamic/%s' % d ['id'])
                ud = ud ['data']['attributes']
                if dend and ud ['valid_from'] > dend :
                    break
                if ud ['valid_to'] and ud ['valid_to'] <= dstart :
                    continue
                otp = ud ['overtime_period']
                if otp :
                    otp = self.get ('overtime_period/%s' % otp ['id'])
                    otp = otp ['data']['attributes']
                    print \
                        ( " %ssd = dict (months = %s, required_overtime = %s,"
                          " weekly = %s)"
                        % ( ind
                          , otp ['months']
                          , otp ['required_overtime']
                          , otp ['weekly']
                          )
                        )
                    print (ind, "otp = db.overtime_period.filter (None, sd)")
                    print (ind, "assert len (otp) == 1")
                    print (ind, "otp = otp [0]")
                else :
                    print (ind, "otp = None")
                print (ind, "holo = db.work_location.create \\")
                print (ind, "    ( code = 'Home-AT'")
                print (ind, "    , description = 'Home Office Location'")
                print (ind, "    )")
                print (ind, "db.user_dynamic.create \\")
                for n, pname in enumerate (ud) :
                    if isinstance (ud [pname], (type ([]), type ({}))) :
                        continue
                    delim = ['(', ','][bool (n)]
                    value = ud [pname]
                    if value is None :
                        continue
                    if pname.startswith ('valid_') :
                        value = 'date.Date ("%s")' % value
                    print \
                        (" %s    %s %-18s = %s" % (ind, delim, pname, value))
                print (ind, "    , org_location       = olo")
                print (ind, "    , overtime_period    = otp")
                print (ind, "    , user               = user")
                print \
                    ( " %s    , vac_aliq           = '%s'"
                    % (ind, ud ['vac_aliq']['id'])
                    )
                print (ind, "    )")
        if self.args.vcorr :
            d   = dict (absolute = True)
            d ['@page_size'] = 1
            vcabs = self.get ('vacation_correction?' + urlencode (d))
            vcabs = vcabs ['data']['collection']
            assert len (vcabs) <= 1
            d   = dict (filter)
            d ['absolute'] = False
            vcs = self.get ('vacation_correction?' + urlencode (filter))
            vcs = vcs ['data']['collection']
            for v in vcabs + vcs :
                vc = self.get ('vacation_correction/%s' % v ['id'])
                vc = vc ['data']['attributes']
                print (ind, "vcorr = db.vacation_correction.create \\")
                print (ind, "    ( user     = user")
                print (ind, "    , date     = date.Date ('%s')" % vc ['date'])
                print (ind, "    , absolute = %s" % vc ['absolute'])
                print (ind, "    , days     = %s" % vc ['days'])
                print (ind, "    )")
        if self.args.leaves :
            leave_filter = dict \
                (user = self.args.user, first_day = self.args.daterange)
            leave_filter ['@sort'] = 'first_day'
            lvs = self.get ('leave_submission?' + urlencode (leave_filter))
            lvs = lvs ['data']['collection']
            for lv in lvs :
                l = self.get ('leave_submission/%s' % lv ['id'])
                l = l ['data']['attributes']
                print (ind, "ls = db.leave_submission.create \\")
                print (ind, "    ( user      = user")
                print \
                    ( " %s    , first_day = date.Date ('%s')"
                    % (ind, l ['first_day'])
                    )
                print \
                    ( " %s    , last_day  = date.Date ('%s')"
                    % (ind, l ['last_day'])
                    )
                print (ind, "    , status    = '%s'" % l ['status']['id'])
                print (ind, "    , time_wp   = '44'")
                print (ind, "    )")
        if self.args.do_timerecs :
            filter ['@sort'] = 'date'
            drs = self.get ('daily_record?' + urlencode (filter))
            drs = drs ['data']['collection']
            for drr in drs :
                dr = self.get ('daily_record/%s' % drr ['id'])
                dr = dr ['data']['attributes']
                print (ind, "dr = db.daily_record.create \\")
                print (ind, "    ( user = user")
                print \
                    (" %s    , date = date.Date ('%s')" % (ind, dr ['date']))
                print \
                    ( " %s    , weekend_allowed   = %s"
                    % (ind, dr ['weekend_allowed'])
                    )
                print \
                    ( " %s    , required_overtime = %s"
                    % (ind, dr ['required_overtime'])
                    )
                print (ind, "    )")
                for tri in dr ['time_record'] :
                    tr = self.get ('time_record/%s' % tri ['id'])
                    tr = tr ['data']['attributes']
                    print (ind, "tr = db.time_record.create \\")
                    print (ind, "    ( daily_record  = dr")
                    print \
                        (" %s    , duration      = %s" % (ind, tr ['duration']))
                    if tr ['time_activity'] :
                        print \
                            (" %s    , time_activity = '%s'"
                            % (ind, tr ['time_activity'])
                            )
                    if tr ['wp'] and tr ['wp']['id'] in wpdict :
                        new_wpid = wpdict [tr ['wp']['id']]
                    elif tr ['wp'] is None :
                        new_wpid = None
                    else :
                        wp = self.get ('time_wp/%s' % tr ['wp']['id'])
                        wp = wp ['data']['attributes']
                        tp = self.get ('time_project/%s' % wp ['project']['id'])
                        tp = tp ['data']['attributes']
                        if wp ['travel'] :
                            new_wpid = 3
                        elif tp ['is_public_holiday'] :
                            new_wpid = 1
                        elif tp ['is_vacation'] :
                            new_wpid = 44
                        elif tp ['no_overtime'] :
                            new_wpid = 2
                        else :
                            wpmax += 1
                            new_wpid = wpmax
                        wpdict [tr ['wp']['id']] = new_wpid
                    if new_wpid :
                        print (ind, "    , wp            = '%s'" % new_wpid)
                    # FIXME: Here we should iterate over attendance recs
                    # not create the attendance record from time_record
                    # data. Must be changed when the attendance record
                    # changes are rolled out.
                    print (ind, "    )")
                    print (ind, "db.attendance_record.create \\")
                    print (ind, "    ( daily_record  = dr")
                    print (ind, "    , time_record   = tr")
                    if tr ['start'] :
                        print \
                            ( " %s    , start         = '%s'"
                            % (ind, tr ['start'])
                            )
                        print \
                            ( " %s    , end           = '%s'"
                            % (ind, tr ['end'])
                            )
                    if tr ['work_location'] :
                        id = tr ['work_location']['id']
                        if id == '8' :
                            id = 'holo'
                        else :
                            id = "'%s'" % id
                        print (" %s    , work_location = '%s'" % (ind, id))
                    print (ind, "    )")
        print (ind, "db.commit ()")
        print ("# end def import_data_%s" % userid)

    # end def print_timerecs

# end class Getter

def main () :
    dir = os.getcwd ()
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'user'
        , help    = 'Username for whom data is exported'
        )
    cmd.add_argument \
        ( 'daterange'
        , help    = 'Date range for export'
        )
    cmd.add_argument \
        ( '-c', '--vacation_correction'
        , dest    = 'vcorr'
        , help    = 'Export vacation corrections, too'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-D', '--dynuser'
        , dest    = 'dynuser'
        , help    = 'Export dynamic user data too for given range'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-L', '--leaves'
        , help    = 'Export leave requests for given range'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-p', '--password'
        , help    = 'Password to use for access, better use .netrc'
        )
    cmd.add_argument \
        ( '-u', '--username'
        , help    = 'User name used to access the tracker, default=%(default)s'
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-U', '--url'
        , help    = 'URL of tracker (without rest path) default: %(default)s'
        , default = 'http:s//tracker.example.com/ttt/'
        )
    cmd.add_argument \
        ( '-t', '--no-timerecs'
        , dest    = 'do_timerecs'
        , help    = 'Do not export time records (and daily records)'
        , action  = 'store_false'
        , default = True
        )
    args = cmd.parse_args ()
    g = Getter (args)
    g.print_timerecs ()
# end def main

if __name__ == '__main__' :
    main ()
