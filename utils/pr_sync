#!/usr/bin/python3

from __future__ import print_function
from __future__ import absolute_import

import os
import sys
from   datetime              import datetime
from   argparse              import ArgumentParser
from   rsclib.pycompat       import text_type
from   roundup               import instance
from   roundup.date          import Date
from   roundup.anypy.strings import u2s
from   requester             import Requester, urlencode

class PR_Sync (Requester):
    """ Sync Time-Tracker data from remote time tracker vie XMLRPC.
    """

    property_classes = dict \
        (
         ( ('sap_cc.deputy',                  'user')
         , ('sap_cc.responsible',             'user')
         , ('sap_cc.purchasing_agents',       'user')
         , ('sap_cc.group_lead',              'user')
         , ('sap_cc.team_lead',               'user')
         #, ('sap_cc.nosy',                    'user')
         , ('sap_cc.organisation',            'organisation')
         , ('time_project.deputy',            'user')
         #, ('time_project.nosy',              'user')
         , ('time_project.organisation',      'organisation')
         , ('time_project.responsible',       'user')
         , ('time_project.purchasing_agents', 'user')
         , ('time_project.group_lead',        'user')
         , ('time_project.team_lead',         'user')
         , ('time_project.status',            'time_project_status')
         , ('user.supervisor',                'user')
        ))

    def __init__ (self, args):
        self.__super.__init__ (args)
        tracker        = instance.open (args.database_directory)
        self.db        = tracker.open (args.user)
        sys.path.insert (1, os.path.join (args.database_directory, 'lib'))
        global common
        common         = __import__ ('common')
        self.update    = args.update
        self.classname = None
        self.idmap     = {}
        self.pendmap   = {}
        self.now       = Date ('.')
        self.uvalid    = None
        self.obsolete  = None
        r = self.get ('time_project_status?active=True')
        self.tc_active = dict.fromkeys \
            (x ['id'] for x in r ['data']['collection'])
    # end def __init__

    # Check methods that check if a class item is valid
    def check_organisation (self, item):
        d = item ['valid_to']
        if d:
            if isinstance (d, text_type):
                d = str (d)
            d = Date (d)
        return not d or d > self.now
    # end def check_organisation
    check_department = check_organisation

    def check_time_project (self, item):
        if item ['status']['id'] not in self.tc_active:
            return False
        return bool \
            (   not item ['approval_hr']
            and not item ['approval_required']
            and not item ['is_public_holiday']
            and not item ['is_special_leave']
            and not item ['is_vacation']
            and not item ['no_overtime']
            and ('only_hours' not in item or not item ['only_hours'])
            and item ['op_project']
            )
    # end def check_time_project

    def fix_time_project (self, item, id):
        """ Add org_id-id as description
            Add default purchasing_agents if missing.
        """
        orgid = ''
        if item ['organisation']:
            orgid = item ['organisation']['id']
        item ['description'] = '-'.join ((orgid, id))
        if self.args.purchasing_agent and not item ['purchasing_agents']:
            item ['purchasing_agents'] = \
                [dict (id = self.args.purchasing_agent)]
    # end def fix_time_project

    def fix_sap_cc (self, item, id):
        """ Add default purchasing_agent if missing.
        """
        if self.args.purchasing_agent and not item ['purchasing_agents']:
            item ['purchasing_agents'] = \
                [dict (id = self.args.purchasing_agent)]
    # end def fix_sap_cc

    def check_user (self, user):
        if user ['username'] in ('admin', 'anonymous'):
            return True
        if not self.uvalid:
            r = self.get ('user_status?name:=valid-ad')
            assert len (r ['data']['collection']) == 1
            self.uvalid = r ['data']['collection'][0]['id']
        return user ['status']['id'] == self.uvalid
    # end def check_user

    def search_time_project (self, item, id):
        """ Try to find local time_project by description which contains
            the *original* id.
        """
        d = item ['description']
        if not d:
            return None
        items = self.db.time_project.filter (None, dict (description = d))
        for it in items:
            if self.db.time_project.get (it, 'description') == d:
                return it
        return None
    # end def search_time_project

    def fix_prop (self, value):
        if isinstance (value, text_type):
            return u2s (value)
        return value
    # end def fix_prop

    def getpropclass (self, prop):
        cn = self.classname
        return self.property_classes.get ('%s.%s' % (cn, prop), None)
    # end def getpropclass

    def map_id (self, prop, value):
        if value is None or isinstance (value, type ([])) and not value:
            return None
        idm = self.idmap [self.getpropclass (prop)]
        if isinstance (value, type ([])):
            v = []
            for x in value:
                if isinstance (x, dict):
                    x = x ['id']
                if x in idm:
                    v.append (idm [x])
            if v:
                return v
            return None
        if isinstance (value, dict):
            return idm [value ['id']]
        return idm [value]
    # end def map_id

    def sync (self):
        self.sync_class \
            ( 'organisation'
            , ('name', 'description', 'may_purchase', 'company_code')
            , ('valid_to',)
            )
        self.sync_pending ()
        self.sync_class \
            ('time_project_status', ('name', 'description', 'active'))
# Do *NOT* sync user status: The stati in the pr-tracker (in particular
# the roles and ldap groups) are different.
#        # only once at beginning?
#        self.sync_class \
#            ( 'user_status'
#            , ('name', 'description', 'is_nosy', 'ldap_group', 'roles')
#            )
        self.sync_user ()
        self.sync_user_org ()
        self.sync_pending ()
        self.sync_class \
            ( 'sap_cc'
            , ( 'name', 'description', 'group_lead', 'responsible', 'deputy'
              , 'purchasing_agents', 'team_lead', 'valid', 'organisation'
              )
            , required = ('responsible',)
            )
        self.sync_class \
            ( 'time_project'
            , ( 'name', 'deputy', 'description', 'group_lead', 'team_lead'
              , 'organisation', 'responsible', 'status'
              , 'purchasing_agents', 'infosec_req'
              )
            , ( 'approval_hr', 'approval_required', 'is_public_holiday'
              , 'is_special_leave', 'is_vacation', 'no_overtime'
              , 'only_hours', 'op_project'
              )
            , required = ('responsible',)
            )

        self.sync_pending ()
        if self.update:
            self.db.commit ()
    # end def sync

    def sync_class \
        ( self
        , classname
        , propnames
        , additional = ()
        , key        = 'name'
        , required   = ()
        , dont_sync  = {}
        , update     = True
        , **default
        ):
        self.verbose ('Syncing: %s (upd=%s)' % (classname, update))
        assert key in propnames
        for r in required:
            assert r in propnames
        self.classname = classname
        cls = self.db.getclass (classname)
        self.idmap [classname] = {}
        mapped     = {}
        nonmapped  = {}
        pending    = {}
        for p in propnames:
            pkey = self.getpropclass (p)
            if pkey:
                if pkey in self.idmap and pkey != classname:
                    mapped [p] = 1
                else:
                    pending [p] = 1
            else:
                nonmapped [p] = 1
        if pending and update:
            self.pendmap [classname] = {}
        found = {}
        d    = {}
        d ['@fields'] = ','.join (propnames + additional)
        coll = self.get (classname + '?' + urlencode (d)) ['data']['collection']
        for item in coll:
            id  = item ['id']
            lid = None
            if id in dont_sync:
                lid = cls.lookup (self.fix_prop (item [key]))
                found [lid] = True
                continue
            valid = True
            check = getattr (self, 'check_' + classname, None)
            if check:
                valid = check (item)
            fixer = getattr (self, 'fix_' + classname, None)
            if fixer:
                fixer (item, id)
            propsearch = getattr (self, 'search_' + classname, None)
            lid = None
            if 'sync_id' in cls.properties:
                lids = cls.stringFind (sync_id = id)
                assert len (lids) <= 1
                if lids:
                    lid = lids [0]
                    self.verbose \
                        ( "Found via sync_id: %s%s->%s%s"
                        % (classname, id, classname, lid)
                        , level = 3
                        )
            if lid is None:
                try:
                    lid = cls.lookup (self.fix_prop (item [key]))
                except KeyError:
                    if propsearch:
                        lid = propsearch (item, id)
            if valid:
                self.verbose \
                    ("Syncing: %s%s %s" % (classname, id, item), level = 3)
                if not lid:
                    params = dict (default)
                    params.update \
                        ( (k, self.fix_prop (item [k]))
                          for k in nonmapped if item [k] is not None
                        )
                    if 'sync_id' in cls.properties:
                        params ['sync_id'] = id
                    for k in mapped:
                        itemid = item [k]
                        if isinstance (itemid, dict):
                            itemid = itemid ['id']
                        try:
                            v = self.map_id (k, itemid)
                        except KeyError:
                            if k in item:
                                print \
                                    ( "WARN: Not in map: %s%s %s:%s"
                                    % (classname, id, k, itemid)
                                    )
                            else:
                                print \
                                    ( "WARN: Not in class: %s %s"
                                    % (classname, k)
                                    )
                            v = None
                        if v is None:
                            continue
                        params [k] = v
                    for r in required:
                        if r not in params:
                            print \
                                ( 'WARN: Not in params: "%s" -- '
                                  'not converting %s%s'
                                % (r, classname, id)
                                )
                            break
                    else:
                        self.verbose \
                            ("Create: %s %s" % (classname, params), level = 2)
                        if self.update and update:
                            lid = cls.create (** params)
                            found [lid] = True
                else:
                    found [lid] = True
                    litem = cls.getnode (lid)
                    d = {}
                    for p in default:
                        ritem = self.fix_prop (default [p])
                        if litem [p] is None:
                            d [p] = ritem
                    if 'roles' in default and 'roles' not in d:
                        roles = dict.fromkeys (common.role_list (litem.roles))
                        roles_old = dict (roles)
                        for r in common.role_list (default ['roles']):
                            if r not in roles:
                                roles [r] = 1
                        if roles != roles_old:
                            d ['roles'] = ','.join (roles.keys ())
                    if 'sync_id' in cls.properties and litem.sync_id != id:
                        d ['sync_id'] = id
                    for p in nonmapped:
                        ritem = self.fix_prop (item [p])
                        if ritem != litem [p]:
                            d [p] = ritem
                    for p in mapped:
                        itemid = item [p]
                        if isinstance (itemid, dict):
                            itemid = itemid ['id']
                        try:
                            v = self.map_id (p, itemid)
                        except KeyError:
                            print \
                                ( "WARN: Not in map: %s%s %s:%s"
                                % (classname, id, p, itemid)
                                )
                            v = None
                        if v is None:
                            # We *want* empty purchasing agents if empty in tt
                            if p == 'purchasing_agents':
                                v = []
                            else:
                                continue
                        if v != litem [p]:
                            d [p] = v
                    if (d):
                        self.verbose \
                            ( "Set: %s%s->%s%s %s"
                            % (classname, id, classname, lid, d)
                            , level = 2
                            )
                        if self.update and update:
                            cls.set (lid, ** d)
                self.idmap [classname][id] = lid
                if pending and update:
                    self.pendmap [classname][lid] = {}
                    for k in pending:
                        if item [k] is not None:
                            it = item [k]
                            if isinstance (it, dict):
                                it = it ['id']
                            self.pendmap [classname][lid][k] = it
            elif lid:
                if classname != 'user':
                    self.verbose ("Retire: %s%s" % (classname, lid), level = 2)
                    if self.update and update:
                        cls.retire (lid)
                else:
                    if not self.obsolete:
                        self.obsolete = self.db.user_status.lookup ('obsolete')
                    if item ['status'] != self.obsolete:
                        self.verbose \
                            ("Marking obsolete: user%s" % lid, level = 2)
                        if self.update and update:
                            cls.set (lid, status = self.obsolete)
        for lid in cls.getnodeids (retired = False):
            node = cls.getnode (lid)
            if classname == 'user' and node.status == self.obsolete:
                continue
            if lid not in found:
                if classname == 'user':
                    self.verbose ("MARKING obsolete: user%s" % lid, level = 2)
                    if self.update and update:
                        cls.set (lid, status = self.obsolete)
                else:
                    self.verbose ("RETIRE: %s%s" % (classname, lid), level = 2)
                    if self.update and update:
                        cls.retire (lid)

        if self.update and update:
            self.db.commit ()
    # end def sync_class

    def sync_pending (self):
        for cn in self.pendmap:
            self.classname = cn
            cls = self.db.getclass (cn)
            for lid, props in self.pendmap [cn].iteritems ():
                litem = cls.getnode (lid)
                d = {}
                for k, v in props.iteritems ():
                    lv = self.map_id (k, v)
                    if lv != litem [k]:
                        d [k] = lv
                if d:
                    self.verbose ("Set: %s%s %s" % (cn, lid, d), level = 2)
                    if self.update:
                        cls.set (lid, ** d)
        self.pendmap = {}
    # end def sync_pending

    def sync_user (self):
        self.sync_class \
            ( 'user'
            , ( 'username', 'address', 'alternate_addresses'
              , 'realname', 'status', 'supervisor'
              )
            , key       = 'username'
            , roles     = 'User,Nosy'
            , dont_sync = dict.fromkeys (('1', '2'))
            , update    = self.args.sync_user
            )
    # end def sync_user

    def sync_user_org (self):
        changed = False
        # Fetch remote organisation, username via dynamic user records
        # for *all* users:
        d = dict \
            ( valid_from = ';.'
            , valid_to   = '.;,-'
            )
        d ['@fields'] = 'user.username,org_location.organisation.name'
        coll = self.get ('user_dynamic?' + urlencode (d)) ['data']['collection']
        org_by_user = {}
        org_by_name = {}
        for c in coll:
            username = c ['user.username']
            orgname  = c ['org_location.organisation.name']
            if orgname not in org_by_name:
                try:
                    org_by_name [orgname] = self.db.organisation.lookup \
                        (orgname)
                except KeyError:
                    org_by_name [orgname] = None
            org_by_user [username] = org_by_name [orgname]
        for uid in self.db.user.getnodeids ():
            u = self.db.user.getnode (uid)
            org = org_by_user.get (u.username, None)
            if u.organisation != org:
                self.verbose \
                    ( 'Setting org=%s for user%s (upd=%s)'
                    % (org, uid, self.update)
                    )
                self.db.user.set (uid, organisation = org)
                changed = True
        if changed and self.update:
            self.db.commit ()
    # end def sync_user_org

    def verbose (self, msg, level = 1, * args):
        if (self.args.verbose or 0) >= level:
            print (msg, *args)
    # end def verbose

# end class PR_Sync

def main ():
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'url'
        , help   = 'REST-API URL of remote tracker'
        )
    cmd.add_argument \
        ( "-C", "--disable-cert-check-warning"
        , help    = "Disable certificate check warning for https connection"
        , default = False
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-d", "--database-directory"
        , help    = "Directory of the roundup installation"
        , default = '.'
        )
    cmd.add_argument \
        ( "--organisation-only"
        , help    = "Sync only organisations of users"
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-P", "--password"
        , help    = "Password, better use .netrc"
        )
    cmd.add_argument \
        ( "-p", "--default-purchasing-agent"
        , dest    = "purchasing_agent"
        , help    = "Default for purchasing_agent if none specified"
        , default = '921'
        )
    cmd.add_argument \
        ( "-r", "--remote-user"
        , dest    = 'username' # For compat with Requester base class
        , help    = "Remote API user"
        , default = 'prtracker-sync'
        )
    cmd.add_argument \
        ( "-s", "--sync-user"
        , help    = "Only if this option is given we sync users."
                    " This does *not* apply to user.organisation"
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-u", "--update"
        , help    = "Update roundup with info remote installation"
        , default = False
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-U", "--user"
        , help    = "Local database user"
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-v', '--verbose'
        , help   = 'Verbose output'
        , action = 'count'
        )
    args = cmd.parse_args ()

    sync = PR_Sync (args)
    if args.organisation_only:
        sync.sync_user     ()
        sync.sync_user_org ()
    else:
        sync.sync ()
# end def main

if __name__ == '__main__':
    main ()
